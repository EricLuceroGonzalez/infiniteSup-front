{"version":3,"sources":["shared/components/UIElements/MiniSpinner.js","shared/components/UIElements/DateAndTime.js","user/Dashboard.js"],"names":["MiniSpinner","DateAndTime","useState","time","setTime","useEffect","moment","locale","setInterval","format","style","color","fontFamily","textAlign","fontSize","Dashboard","useHttpClient","isLoading","error","sendRequest","clearError","isMounted","setCategories","document","title","a","process","responseData","categories","console","log","fetchCategories","marginTop","ErrorModal","onClear","LoadingSpinner","asOverlay","className","Button"],"mappings":"mOAaeA,G,YATK,WAClB,OAGE,8BCuBWC,EAzBK,WAAO,IAAD,EACAC,qBADA,mBACjBC,EADiB,KACXC,EADW,KAWxB,OAPAC,qBAAU,WACRC,IAAOC,OAAO,MACdC,aAAY,WACVJ,EAAQE,MAASG,OAAO,oCACvB,OACF,IAGD,uBACEC,MAAO,CACLC,MAAO,mBACPC,WAAY,YACZC,UAAW,OACXC,SAAU,WAGXX,GAAc,kBAAC,EAAD,Q,gCCqGNY,UAxHG,WAAO,IAAD,EACgCC,cAA9CC,EADc,EACdA,UAAWC,EADG,EACHA,MAAOC,EADJ,EACIA,YAAaC,EADjB,EACiBA,WADjB,EAEFlB,oBAAS,GAAtBmB,EAFe,sBAGcnB,mBAAS,IAHvB,mBAGHoB,GAHG,WAKtBjB,qBAAU,WACRkB,SAASC,MAAQ,gCAcbH,GAbiB,uCAAG,4BAAAI,EAAA,+EAGON,EAAY,GAAD,OACjCO,6CADiC,4BAHlB,OAGdC,EAHc,OAMpBL,EAAcK,EAAaC,YAC3BC,QAAQC,IAAIH,EAAaC,YAPL,yGAAH,oDAgBnBG,KAED,CAACZ,EAAaE,IAwEjB,OACE,yBAAKX,MAAO,CAAEsB,UAAW,QACzB,kBAACC,EAAA,EAAD,CAAYf,MAAOA,EAAOgB,QALP,WACnBd,OAKCH,GAAa,kBAACkB,EAAA,EAAD,CAAgBC,WAAS,IACrC,yCACA,6BACE,yCACA,yBAAKC,UAAU,2BACb,yBAAKA,UAAU,mBACZ,IACD,kBAAC,EAAD,OAEF,kBAACC,EAAA,EAAD,CAAQD,UAAU,mBAAlB,mBAEF,yBAAKA,UAAU,iBAAf,MAEF,6BACE,oCACA","file":"static/js/5.50a47a29.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./MiniSpinner.css\";\n\nconst MiniSpinner = () => {\n  return (\n    // <div className={`${props.asOverlay && \"loading-spinner__overlay\"}`}>\n    // <span className=\"mini-lds-dual-ring  mr-auto ml-auto\"></span>\n    <p></p>\n    // </div>\n  );\n};\n\nexport default MiniSpinner;\n","import React, { useEffect, useState } from \"react\";\nimport moment from \"moment\";\nimport \"moment/locale/es\";\n\nimport MiniSpinner from \"../UIElements/MiniSpinner\";\n\nconst DateAndTime = () => {\n  const [time, setTime] = useState();\n\n  // Refresh time every 1000 ms\n  useEffect(() => {\n    moment.locale(\"es\");\n    setInterval(() => {\n      setTime(moment().format(\"dddd, MMMM DD YYYY, h:mm:ss a\"));\n    }, 1000);\n  }, []);\n\n  return (\n    <p\n      style={{\n        color: \"rgb(59, 89, 152)\",\n        fontFamily: \"monospace\",\n        textAlign: \"left\",\n        fontSize: \"0.75em\",\n      }}\n    >\n      {time ? time : <MiniSpinner />}\n    </p>\n  );\n};\n\nexport default DateAndTime;\n","import React, { useState, useEffect } from \"react\";\nimport { useHttpClient } from \"../shared/hooks/http-hook\";\nimport DateAndTime from \"../shared/components/UIElements/DateAndTime\";\nimport \"./Dashboard.css\";\nimport Button from \"../shared/components/UIElements/Button\";\nimport ErrorModal from \"../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../shared/components/UIElements/LoadingSpinner\";\nconst Dashboard = () => {\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [isMounted] = useState(true);\n  const [categories, setCategories] = useState([]);\n\n  useEffect(() => {\n    document.title = \"Infinite Supplies | DASHBOARD\";\n    const fetchCategories = async () => {\n      // if (isMounted) {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/products/getCategories`\n        );\n        setCategories(responseData.categories);\n        console.log(responseData.categories);\n        // setIsMounted(false)\n      } catch (err) {}\n      // }\n    };\n\n    if (isMounted) {\n      //  console.log(`isMounted: ${isMounted}`);\n\n      fetchCategories();\n    }\n  }, [sendRequest, isMounted]);\n\n  const renderProducts = () => {\n    if (categories.length > 0) {\n      const allCats = categories.map((item, j) => {\n        return (\n          <div key={j} className=\"col-12 mr-auto ml-auto\">\n            <h4>{item.categoryName}</h4>\n            {item.products.map((item, k) => {\n              return (\n                <div key={k} className=\"col-12 bordeB\">\n                  {item.name}\n                  <div className=\"col-12 col-sm-4\">Descripción</div>\n                  <div className=\"col-12 col-sm-6 bordeB\">\n                    {item.description.map((item, j) => {\n                      return <p key={j}>{item}</p>;\n                    })}\n                  </div>\n\n                  <div>Ventajas</div>\n                  <div className=\"col-12 col-sm-6 bordeB\">\n                    {item.features.map((item, j) => {\n                      return <p key={j}>{item}</p>;\n                    })}\n                  </div>\n                  <div>\n                    <div className=\"d-flex\">\n                      <div className=\"col-12 col-sm-4\">Creado:</div>\n                      <div className=\"col-12 col-sm-6\">{item.creationDate}</div>\n                    </div>\n                  </div>\n                  <div>Uso domestico</div>\n                  <div>{item.domesticUse ? \"Si\" : \"No\"}</div>\n                  <div>Uso industrial</div>\n                  <div>{item.industryUse ? \"Si\" : \"No\"}</div>\n                  <div className=\"bordeB\" colSpan={item.sizes.length}>\n                    Tamaños{item.sizes.length}\n                  </div>\n                  {item.sizes.map((item, k) => {\n                    return (\n                      <div key={k} className=\"bordeB\">\n                        {item}{\" \"}\n                      </div>\n                    );\n                  })}\n                  <div>Fragancia</div>\n                  <div>{item.hasFragance ? \"Si\" : \"No\"}</div>\n                  <div>Aromas</div>\n                  <div>\n                    {item.hasFragance &&\n                      item.flavors.map((item, k) => {\n                        return <span key={k}>{item} </span>;\n                      })}\n                  </div>\n                  <div></div>\n\n                  {item.flavors}\n                  <div></div>\n                  <div></div>\n                  <div></div>\n                </div>\n              );\n            })}\n          </div>\n        );\n      });\n      return allCats;\n    }\n  };\n  const errorHandler = () => {\n    clearError();\n  };\n  return (\n    <div style={{ marginTop: \"2em\" }}>\n    <ErrorModal error={error} onClear={errorHandler} />\n    {isLoading && <LoadingSpinner asOverlay />}\n      <h2>Dashboard</h2>\n      <div>\n        <h2>Productos</h2>\n        <div className=\"col-12 row d-flex align\">\n          <div className=\"col-12 col-sm-6\">\n            {\" \"}\n            <DateAndTime />\n          </div>\n          <Button className=\"col-12 col-sm-6\">Nuevo Producto</Button>\n        </div>\n        <div className=\"col-12 bordeA\">a</div>\n      </div>\n      <div>\n        <h2>Blog</h2>\n        <div>'renderProducts()'</div>\n      </div>\n    </div>\n  );\n};\nexport default Dashboard;\n"],"sourceRoot":""}